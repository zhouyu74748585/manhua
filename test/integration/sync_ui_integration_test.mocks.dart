// Mocks generated by Mockito 5.4.6 from annotations
// in manhua_reader_flutter/test/integration/sync_ui_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:manhua_reader_flutter/data/models/sync/device_info.dart' as _i5;
import 'package:manhua_reader_flutter/data/models/sync/sync_conflict.dart'
    as _i6;
import 'package:manhua_reader_flutter/data/models/sync/sync_session.dart'
    as _i2;
import 'package:manhua_reader_flutter/data/services/sync/multi_device_sync_service.dart'
    as _i3;
import 'package:manhua_reader_flutter/data/services/sync/sync_coordinator_service.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSyncSession_0 extends _i1.SmartFake implements _i2.SyncSession {
  _FakeSyncSession_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MultiDeviceSyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultiDeviceSyncService extends _i1.Mock
    implements _i3.MultiDeviceSyncService {
  MockMultiDeviceSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.DeviceInfo>> get devicesStream => (super.noSuchMethod(
        Invocation.getter(#devicesStream),
        returnValue: _i4.Stream<List<_i5.DeviceInfo>>.empty(),
      ) as _i4.Stream<List<_i5.DeviceInfo>>);

  @override
  _i4.Stream<_i2.SyncSession> get syncSessionStream => (super.noSuchMethod(
        Invocation.getter(#syncSessionStream),
        returnValue: _i4.Stream<_i2.SyncSession>.empty(),
      ) as _i4.Stream<_i2.SyncSession>);

  @override
  _i4.Stream<List<_i6.SyncConflict>> get conflictsStream => (super.noSuchMethod(
        Invocation.getter(#conflictsStream),
        returnValue: _i4.Stream<List<_i6.SyncConflict>>.empty(),
      ) as _i4.Stream<List<_i6.SyncConflict>>);

  @override
  List<_i5.DeviceInfo> get discoveredDevices => (super.noSuchMethod(
        Invocation.getter(#discoveredDevices),
        returnValue: <_i5.DeviceInfo>[],
      ) as List<_i5.DeviceInfo>);

  @override
  List<_i2.SyncSession> get activeSessions => (super.noSuchMethod(
        Invocation.getter(#activeSessions),
        returnValue: <_i2.SyncSession>[],
      ) as List<_i2.SyncSession>);

  @override
  List<_i6.SyncConflict> get pendingConflicts => (super.noSuchMethod(
        Invocation.getter(#pendingConflicts),
        returnValue: <_i6.SyncConflict>[],
      ) as List<_i6.SyncConflict>);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isDiscovering => (super.noSuchMethod(
        Invocation.getter(#isDiscovering),
        returnValue: false,
      ) as bool);

  @override
  bool get isAdvertising => (super.noSuchMethod(
        Invocation.getter(#isAdvertising),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<List<_i5.DeviceInfo>> get availableDevicesStream =>
      (super.noSuchMethod(
        Invocation.getter(#availableDevicesStream),
        returnValue: _i4.Stream<List<_i5.DeviceInfo>>.empty(),
      ) as _i4.Stream<List<_i5.DeviceInfo>>);

  @override
  _i4.Stream<List<_i2.SyncSession>> get activeSyncSessionsStream =>
      (super.noSuchMethod(
        Invocation.getter(#activeSyncSessionsStream),
        returnValue: _i4.Stream<List<_i2.SyncSession>>.empty(),
      ) as _i4.Stream<List<_i2.SyncSession>>);

  @override
  _i4.Stream<_i7.MultiDeviceSyncEvent> get eventStream => (super.noSuchMethod(
        Invocation.getter(#eventStream),
        returnValue: _i4.Stream<_i7.MultiDeviceSyncEvent>.empty(),
      ) as _i4.Stream<_i7.MultiDeviceSyncEvent>);

  @override
  _i4.Future<void> initialize({int? port}) => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {#port: port},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> startSharing({int? port}) => (super.noSuchMethod(
        Invocation.method(
          #startSharing,
          [],
          {#port: port},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stopSharing() => (super.noSuchMethod(
        Invocation.method(
          #stopSharing,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> testDeviceConnectivity(_i5.DeviceInfo? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #testDeviceConnectivity,
          [device],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.SyncSession> startLibrarySync({
    required _i5.DeviceInfo? targetDevice,
    required List<String>? libraryIds,
    _i2.SyncDirection? direction = _i2.SyncDirection.bidirectional,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startLibrarySync,
          [],
          {
            #targetDevice: targetDevice,
            #libraryIds: libraryIds,
            #direction: direction,
          },
        ),
        returnValue: _i4.Future<_i2.SyncSession>.value(_FakeSyncSession_0(
          this,
          Invocation.method(
            #startLibrarySync,
            [],
            {
              #targetDevice: targetDevice,
              #libraryIds: libraryIds,
              #direction: direction,
            },
          ),
        )),
      ) as _i4.Future<_i2.SyncSession>);

  @override
  _i4.Future<_i2.SyncSession> startProgressSync({
    required _i5.DeviceInfo? targetDevice,
    required String? mangaId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startProgressSync,
          [],
          {
            #targetDevice: targetDevice,
            #mangaId: mangaId,
          },
        ),
        returnValue: _i4.Future<_i2.SyncSession>.value(_FakeSyncSession_0(
          this,
          Invocation.method(
            #startProgressSync,
            [],
            {
              #targetDevice: targetDevice,
              #mangaId: mangaId,
            },
          ),
        )),
      ) as _i4.Future<_i2.SyncSession>);

  @override
  _i4.Future<void> resolveConflict(
    String? conflictId,
    _i6.ConflictResolution? resolution,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolveConflict,
          [
            conflictId,
            resolution,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i2.SyncSession? getSyncSession(String? sessionId) =>
      (super.noSuchMethod(Invocation.method(
        #getSyncSession,
        [sessionId],
      )) as _i2.SyncSession?);

  @override
  _i4.Future<void> cancelSyncSession(String? sessionId) => (super.noSuchMethod(
        Invocation.method(
          #cancelSyncSession,
          [sessionId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> startDeviceDiscovery() => (super.noSuchMethod(
        Invocation.method(
          #startDeviceDiscovery,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stopDeviceDiscovery() => (super.noSuchMethod(
        Invocation.method(
          #stopDeviceDiscovery,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateSyncSession(_i2.SyncSession? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSyncSession,
          [session],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i5.DeviceInfo> getAvailableDevices() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableDevices,
          [],
        ),
        returnValue: <_i5.DeviceInfo>[],
      ) as List<_i5.DeviceInfo>);

  @override
  List<_i2.SyncSession> getActiveSyncSessions() => (super.noSuchMethod(
        Invocation.method(
          #getActiveSyncSessions,
          [],
        ),
        returnValue: <_i2.SyncSession>[],
      ) as List<_i2.SyncSession>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
