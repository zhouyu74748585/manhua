// Mocks generated by Mockito 5.4.6 from annotations
// in manhua_reader_flutter/test/integration/multi_device_sync_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:manhua_reader_flutter/core/services/network/device_discovery_service.dart'
    as _i3;
import 'package:manhua_reader_flutter/core/services/network/sync_communication_service.dart'
    as _i6;
import 'package:manhua_reader_flutter/data/models/library.dart' as _i8;
import 'package:manhua_reader_flutter/data/models/manga.dart' as _i9;
import 'package:manhua_reader_flutter/data/models/reading_progress.dart'
    as _i10;
import 'package:manhua_reader_flutter/data/models/sync/device_info.dart' as _i5;
import 'package:manhua_reader_flutter/data/models/sync/sync_conflict.dart'
    as _i11;
import 'package:manhua_reader_flutter/data/models/sync/sync_session.dart'
    as _i7;
import 'package:manhua_reader_flutter/data/services/sync/library_sync_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSyncResult_0 extends _i1.SmartFake implements _i2.SyncResult {
  _FakeSyncResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DeviceDiscoveryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceDiscoveryService extends _i1.Mock
    implements _i3.DeviceDiscoveryService {
  MockDeviceDiscoveryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.DeviceInfo>> get devicesStream => (super.noSuchMethod(
        Invocation.getter(#devicesStream),
        returnValue: _i4.Stream<List<_i5.DeviceInfo>>.empty(),
      ) as _i4.Stream<List<_i5.DeviceInfo>>);

  @override
  List<_i5.DeviceInfo> get discoveredDevices => (super.noSuchMethod(
        Invocation.getter(#discoveredDevices),
        returnValue: <_i5.DeviceInfo>[],
      ) as List<_i5.DeviceInfo>);

  @override
  bool get isDiscovering => (super.noSuchMethod(
        Invocation.getter(#isDiscovering),
        returnValue: false,
      ) as bool);

  @override
  bool get isAdvertising => (super.noSuchMethod(
        Invocation.getter(#isAdvertising),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> startAdvertising({int? port}) => (super.noSuchMethod(
        Invocation.method(
          #startAdvertising,
          [],
          {#port: port},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stopAdvertising() => (super.noSuchMethod(
        Invocation.method(
          #stopAdvertising,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> startDiscovery() => (super.noSuchMethod(
        Invocation.method(
          #startDiscovery,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stopDiscovery() => (super.noSuchMethod(
        Invocation.method(
          #stopDiscovery,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [SyncCommunicationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncCommunicationService extends _i1.Mock
    implements _i6.SyncCommunicationService {
  MockSyncCommunicationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onDeviceConnected(dynamic Function(_i5.DeviceInfo)? _onDeviceConnected) =>
      super.noSuchMethod(
        Invocation.setter(
          #onDeviceConnected,
          _onDeviceConnected,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onLibrarySyncRequested(
          dynamic Function(
            String,
            List<String>,
          )? _onLibrarySyncRequested) =>
      super.noSuchMethod(
        Invocation.setter(
          #onLibrarySyncRequested,
          _onLibrarySyncRequested,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onProgressSyncRequested(
          dynamic Function(
            String,
            String,
          )? _onProgressSyncRequested) =>
      super.noSuchMethod(
        Invocation.setter(
          #onProgressSyncRequested,
          _onProgressSyncRequested,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onSyncSessionUpdate(
          dynamic Function(_i7.SyncSession)? _onSyncSessionUpdate) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSyncSessionUpdate,
          _onSyncSessionUpdate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> initialize({int? port}) => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {#port: port},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> startServer() => (super.noSuchMethod(
        Invocation.method(
          #startServer,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stopServer() => (super.noSuchMethod(
        Invocation.method(
          #stopServer,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> pingDevice(_i5.DeviceInfo? device) => (super.noSuchMethod(
        Invocation.method(
          #pingDevice,
          [device],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i5.DeviceInfo?> getDeviceInfo(
    String? ipAddress,
    int? port,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeviceInfo,
          [
            ipAddress,
            port,
          ],
        ),
        returnValue: _i4.Future<_i5.DeviceInfo?>.value(),
      ) as _i4.Future<_i5.DeviceInfo?>);

  @override
  _i4.Future<bool> requestLibrarySync(
    _i5.DeviceInfo? device,
    List<String>? libraryIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestLibrarySync,
          [
            device,
            libraryIds,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> requestProgressSync(
    _i5.DeviceInfo? device,
    String? mangaId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestProgressSync,
          [
            device,
            mangaId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i8.MangaLibrary>> getLibraries(
    _i5.DeviceInfo? device,
    List<String>? libraryIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLibraries,
          [
            device,
            libraryIds,
          ],
        ),
        returnValue:
            _i4.Future<List<_i8.MangaLibrary>>.value(<_i8.MangaLibrary>[]),
      ) as _i4.Future<List<_i8.MangaLibrary>>);

  @override
  _i4.Future<List<_i9.Manga>> getManga(
    _i5.DeviceInfo? device,
    List<String>? libraryIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManga,
          [
            device,
            libraryIds,
          ],
        ),
        returnValue: _i4.Future<List<_i9.Manga>>.value(<_i9.Manga>[]),
      ) as _i4.Future<List<_i9.Manga>>);

  @override
  _i4.Future<bool> syncLibrary(
    _i5.DeviceInfo? device,
    _i8.MangaLibrary? library,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncLibrary,
          [
            device,
            library,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> syncManga(
    _i5.DeviceInfo? device,
    _i9.Manga? manga,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncManga,
          [
            device,
            manga,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i10.ReadingProgress?> getReadingProgress(
    _i5.DeviceInfo? device,
    String? mangaId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReadingProgress,
          [
            device,
            mangaId,
          ],
        ),
        returnValue: _i4.Future<_i10.ReadingProgress?>.value(),
      ) as _i4.Future<_i10.ReadingProgress?>);

  @override
  _i4.Future<bool> updateReadingProgress(
    _i5.DeviceInfo? device,
    _i10.ReadingProgress? progress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateReadingProgress,
          [
            device,
            progress,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [LibrarySyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLibrarySyncService extends _i1.Mock
    implements _i2.LibrarySyncService {
  MockLibrarySyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.SyncProgress> get progressStream => (super.noSuchMethod(
        Invocation.getter(#progressStream),
        returnValue: _i4.Stream<_i2.SyncProgress>.empty(),
      ) as _i4.Stream<_i2.SyncProgress>);

  @override
  _i4.Stream<List<_i11.SyncConflict>> get conflictsStream =>
      (super.noSuchMethod(
        Invocation.getter(#conflictsStream),
        returnValue: _i4.Stream<List<_i11.SyncConflict>>.empty(),
      ) as _i4.Stream<List<_i11.SyncConflict>>);

  @override
  List<_i11.SyncConflict> get pendingConflicts => (super.noSuchMethod(
        Invocation.getter(#pendingConflicts),
        returnValue: <_i11.SyncConflict>[],
      ) as List<_i11.SyncConflict>);

  @override
  _i4.Future<_i2.SyncResult> syncLibraries({
    required _i5.DeviceInfo? targetDevice,
    required List<String>? libraryIds,
    _i7.SyncDirection? direction = _i7.SyncDirection.bidirectional,
    bool? resolveConflictsAutomatically = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncLibraries,
          [],
          {
            #targetDevice: targetDevice,
            #libraryIds: libraryIds,
            #direction: direction,
            #resolveConflictsAutomatically: resolveConflictsAutomatically,
          },
        ),
        returnValue: _i4.Future<_i2.SyncResult>.value(_FakeSyncResult_0(
          this,
          Invocation.method(
            #syncLibraries,
            [],
            {
              #targetDevice: targetDevice,
              #libraryIds: libraryIds,
              #direction: direction,
              #resolveConflictsAutomatically: resolveConflictsAutomatically,
            },
          ),
        )),
      ) as _i4.Future<_i2.SyncResult>);

  @override
  _i4.Future<_i2.SyncResult> syncReadingProgress({
    required _i5.DeviceInfo? targetDevice,
    required String? mangaId,
    bool? useLatestWins = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncReadingProgress,
          [],
          {
            #targetDevice: targetDevice,
            #mangaId: mangaId,
            #useLatestWins: useLatestWins,
          },
        ),
        returnValue: _i4.Future<_i2.SyncResult>.value(_FakeSyncResult_0(
          this,
          Invocation.method(
            #syncReadingProgress,
            [],
            {
              #targetDevice: targetDevice,
              #mangaId: mangaId,
              #useLatestWins: useLatestWins,
            },
          ),
        )),
      ) as _i4.Future<_i2.SyncResult>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
